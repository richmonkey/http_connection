/**
 * Copyright (c) 2014-2015, GoBelieve     
 * All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package main

import "net"
import "time"
import "sync"
import "sync/atomic"
import log "github.com/golang/glog"
import "github.com/googollee/go-engine.io"
import "container/list"

//60s
const CLIENT_TIMEOUT = 60

//待发送的消息数量限制
const MESSAGE_QUEUE_LIMIT = 1000

type Connection struct {
	conn   interface{}
	closed int32
	
	forbidden int32 //是否被禁言
	notification_on bool //桌面在线时是否通知手机端
	online bool
	
	tc     int32 //write channel timeout count
	wt     chan *Message
	lwt    chan int
	
	//客户端协议版本号
	version int

	tm     time.Time
	appid  int64
	uid    int64
	device_id string
	device_ID int64 //generated by device_id + platform_id
	platform_id int8
	
	messages *list.List //待发送的消息队列 FIFO
	mutex  sync.Mutex
}




func (client *Connection) EnqueueNonBlockMessage(msg *Message) bool {
	closed := atomic.LoadInt32(&client.closed)
	if closed > 0 {
		log.Infof("can't send message to closed connection:%d", client.uid)
		return false
	}

	tc := atomic.LoadInt32(&client.tc)
	if tc > 0 {
		log.Infof("can't send message to blocked connection:%d", client.uid)
		atomic.AddInt32(&client.tc, 1)
		return false
	}

	dropped := false
	client.mutex.Lock()
	if client.messages.Len() >= MESSAGE_QUEUE_LIMIT {
		//队列阻塞，丢弃之前的消息
		client.messages.Remove(client.messages.Front())
		dropped = true
	}
	client.messages.PushBack(msg)
	client.mutex.Unlock()
	if dropped {
		log.Info("message queue full, drop a message")
	}
	
	//nonblock
	select {
	case client.lwt <- 1:
	default:
	}
	
	return true
}


func (client *Connection) EnqueueMessage(msg *Message) bool {
	closed := atomic.LoadInt32(&client.closed)
	if closed > 0 {
		log.Infof("can't send message to closed connection:%d", client.uid)
		return false
	}

	tc := atomic.LoadInt32(&client.tc)
	if tc > 0 {
		log.Infof("can't send message to blocked connection:%d", client.uid)
		atomic.AddInt32(&client.tc, 1)
		return false
	}
	select {
	case client.wt <- msg:
		return true
	case <- time.After(60*time.Second):
		atomic.AddInt32(&client.tc, 1)
		log.Infof("send message to wt timed out:%d", client.uid)
		return false
	}
}


// 根据连接类型获取消息
func (client *Connection) read() *Message {
	if conn, ok := client.conn.(net.Conn); ok {
		conn.SetReadDeadline(time.Now().Add(CLIENT_TIMEOUT * time.Second))
		return ReceiveMessage(conn)
	} else if conn, ok := client.conn.(engineio.Conn); ok {
		return ReadEngineIOMessage(conn)
	}
	return nil
}

// 根据连接类型发送消息
func (client *Connection) send(msg *Message) {
	if conn, ok := client.conn.(net.Conn); ok {
		tc := atomic.LoadInt32(&client.tc)
		if tc > 0 {
			log.Info("can't write data to blocked socket")
			return
		}
		conn.SetWriteDeadline(time.Now().Add(60 * time.Second))
		err := SendMessage(conn, msg)
		if err != nil {
			atomic.AddInt32(&client.tc, 1)
			log.Info("send msg:", Command(msg.cmd),  " tcp err:", err)
		}
	} else if conn, ok := client.conn.(engineio.Conn); ok {
		SendEngineIOBinaryMessage(conn, msg)
	}
}

// 根据连接类型关闭
func (client *Connection) close() {
	if conn, ok := client.conn.(net.Conn); ok {
		conn.Close()
	} else if _, ok := client.conn.(engineio.Conn); ok {
		//bug:https://github.com/googollee/go-engine.io/issues/34
		//conn.Close()
	}
}
